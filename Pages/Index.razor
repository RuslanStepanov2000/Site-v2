@page "/home"
@using Tatneft.Data
@using Blazored.LocalStorage
@using System.Security.Claims
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<h1>Самый лучший в мире сайт</h1>
<AuthorizeView>
    <Authorized>
        @context.User.Identity.Name авторизован(а), поэтому видите это сообщение
    </Authorized>

    <NotAuthorized>
        Вы НЕ авторизованы, поэтому видите это сообщение
    </NotAuthorized>
</AuthorizeView>

@code{
    private User user;
    ClaimsPrincipal claimsPrincipal;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    var authState = await authenticationStateTask;
    //    var user_auth = authState.User;

    //    if (!user_auth.Identity.IsAuthenticated)
    //    {
    //        string token = await localStorageService.GetItemAsync<string>("Token");
    //        if (token != null)
    //        {
    //            user = new Tatneft.Data.DBWorkingSQLite().UserGetByToken(token);
    //            if (user != null)
    //            {
    //                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);
    //            }
    //            else { }
    //        }
    //    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            User user = new User();
            user.Token = await localStorageService.GetItemAsync<string>("Token");
            user.TokenRefresh = await localStorageService.GetItemAsync<string>("TokenRefresh");
            user = new DBWorkingSQLite().TokenValidate(user);
            if (user.Id != null)
            {
                user = new DBWorkingSQLite().UserGetById(user);
                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);
            }
            else
            {

            }
        }
        catch
        {

        }
    }
    }
    


