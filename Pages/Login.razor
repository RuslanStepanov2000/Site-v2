@page  "/login"

@using Tatneft.Data
@using System.Security.Claims


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient http;


<EditForm Model="@user" OnValidSubmit="@Authentication">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Самый лучший в мире сайт</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.Email" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        <a href="/signup" class="col-3">Sign up</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {

    private User user;
    public string LoginMesssage { get; set; }
    ClaimsPrincipal claimsPrincipal;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        user = new User();

        claimsPrincipal = (await authenticationStateTask).User;

        try
        {
            if (claimsPrincipal.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("https://localhost:44322/");
            }
        }
        catch
        {

        }
    }

    private async Task<bool> ValidateUser()
    {
        //assume that user is valid
        //call an API

        //HttpRequestMessage httpRequestMessage = new HttpRequestMessage();

        //httpRequestMessage.Method = new HttpMethod("POST");
        DBWorkingSQLite db = new DBWorkingSQLite();

        if (db.UserAuth(user).Email != null)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);
            NavigationManager.NavigateTo("/");
            return await Task.FromResult(true);
        }
        else
        {
            LoginMesssage = "Invalid username or password";
            return await Task.FromResult(true);
        }

    }

    private async Task<bool> Authentication()
    {
        string jsonString;
        DBWorkingSQLite db = new DBWorkingSQLite();

        if (db.UserAuth(user).Email != null)
        {
            jsonString = System.Text.Json.JsonSerializer.Serialize(user);
            HttpClient httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri("https://localhost:44322");
            HttpResponseMessage response = httpClient.PostAsJsonAsync("api/User", user).Result;         


            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);
            NavigationManager.NavigateTo("/");
            return await Task.FromResult(true);
        }
        else
        {
            LoginMesssage = "Invalid username or password";
            return await Task.FromResult(true);
        }




    }

}
