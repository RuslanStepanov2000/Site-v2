@page  "/"
@using Tatneft.Data
@using System.Security.Claims
@using Blazored.LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService




<EditForm Model="@user" OnValidSubmit="@Authentication">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Самый лучший в мире сайт</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.Email" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        <a href="/signup" class="col-3">Sign up</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {

    private User user;
    public string LoginMesssage { get; set; }
    ClaimsPrincipal claimsPrincipal;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        user = new User();
        var authState = await authenticationStateTask;
        var user_auth = authState.User;

        if (user_auth.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/home");
        }
        else
        {
            string token = await localStorageService.GetItemAsync<string>("Token");
            if (token != null)
            {
                user = new Tatneft.Data.DBWorkingSQLite().UserGetByToken(token);
                if (user != null)
                {
                    ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);
                    NavigationManager.NavigateTo("/home");
                }
                else
                {
                    user = new User();
                    claimsPrincipal = (await authenticationStateTask).User;
                }
            }
            else
            {
                user = new User();
                claimsPrincipal = (await authenticationStateTask).User;
            }
        }
    }

    //Аутентификация пользовтеля и установка его прав доступа к контенту
    private async Task<bool> Authentication()
    {
        DBWorkingSQLite db = new DBWorkingSQLite();

        user = db.UserAuth(user);
        if (user.Email != null)
        {
            await localStorageService.SetItemAsync<string>("Token", user.Token);
            await localStorageService.SetItemAsync<string>("TokenRefresh", user.TokenRefresh);

            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);
            NavigationManager.NavigateTo("/home");

            return await Task.FromResult(true);
        }
        else
        {
            LoginMesssage = "Invalid username or password";
            return await Task.FromResult(true);
        }
    }

}
