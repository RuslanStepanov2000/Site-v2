@page  "/signup"
@using Tatneft.Data
@using System.Text.RegularExpressions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

<EditForm Model="@user" OnValidSubmit="@RegisterUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Book Stores Register</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.Email" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="confirmPassword" placeholder="confirm password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Sign up" />
        <a href="/" class="col-6">Already an user?</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {

    private User user;
    private string confirmPassword;
    public string LoginMesssage { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {

        var authState = await authenticationStateTask;
        var user_auth = authState.User;

        if (user_auth.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/home");
        }
        else
        {


            user = new User();
            await base.OnInitializedAsync();

        }


    }

    private async Task RegisterUser()
    {
        string pattern = "@";
        if ((user.Email!=null) && (Regex.IsMatch(user.Email,pattern)) )
        {
            DBWorkingSQLite db = new DBWorkingSQLite();
            db.UserAddNew(user);
            NavigationManager.NavigateTo("/home");
        }
        else
        {
            LoginMesssage = "Please check input data";
            await Task.FromResult(true);
        }

    }
    private void Redirect()
    {
        NavigationManager.NavigateTo("/home");
    }

}
